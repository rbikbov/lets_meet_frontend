---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/cities":
    get:
      summary: return cities by country
      tags:
      - Cities
      operationId: fetchCountryCities
      parameters:
      - name: country
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: array
                items: {}
  "/api/v1/cities/country":
    get:
      summary: return all countries
      tags:
      - Cities
      operationId: fetchCountries
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
  "/api/v1/dialogs/{id}/send_message":
    post:
      summary: creates message
      tags:
      - Dialogs
      operationId: dialogSendMessage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/message"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                text_message:
                  type: string
              required:
              - text_message
  "/api/v1/users/{id}/dialogs":
    get:
      summary: return dialogs
      tags:
      - Dialogs
      operationId: fetchUserDialogs
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                - "$ref": "#/components/schemas/paginated_result"
                - type: object
                  properties:
                    results:
                      type: array
                      items:
                        "$ref": "#/components/schemas/dialog"
                  required:
                  - results
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
  "/api/v1/dialogs/{id}":
    get:
      summary: return dialog
      tags:
      - Dialogs
      operationId: fetchDialog
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/dialog"
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
  "/api/v1/dialogs/{id}/messages":
    get:
      summary: return dialog messages
      tags:
      - Dialogs
      operationId: fetchDialogMessages
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                - "$ref": "#/components/schemas/paginated_result"
                - type: object
                  properties:
                    results:
                      type: array
                      items:
                        "$ref": "#/components/schemas/message"
                  required:
                  - results
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
  "/api/v1/users/{user_id}/dialogs/{id}/read_messages":
    patch:
      summary: read messages by ids
      tags:
      - Dialogs
      operationId: readDialogMessages
      parameters:
      - name: user_id
        in: path
        required: true
        schema:
          type: string
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  read_ids:
                    type: array
                    items:
                      "$ref": "#/components/schemas/id_number"
                required:
                - read_ids
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message_ids:
                  type: array
                  items:
                    "$ref": "#/components/schemas/id_number"
              required:
              - message_ids
  "/api/v1/meets":
    get:
      summary: Search persons
      tags:
      - Meets
      operationId: fetchMeets
      security: []
      parameters:
      - name: search
        in: query
        schema:
          type: object
          properties:
            age_min:
              type: integer
            age_max:
              type: integer
            gender:
              "$ref": "#/components/schemas/gender_type"
            city:
              type: string
            page:
              type: integer
        required:
        - search
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/users_array"
  "/api/v1/meets/{id}/initiate":
    post:
      summary: initiate meet
      tags:
      - Meets
      operationId: initiateMeet
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              examples:
                example_1:
                  value:
                    message: You're liked this person!
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
  "/api/v1/meets/{id}/confirm":
    post:
      summary: confirm meet
      tags:
      - Meets
      operationId: confirmMeet
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              examples:
                example_1:
                  value:
                    message: Dialog opened
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notification_id:
                  "$ref": "#/components/schemas/id_number"
  "/api/v1/meets/{id}/decline":
    delete:
      summary: decline meet
      tags:
      - Meets
      operationId: declineMeet
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '204':
          description: No Content
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notification_id:
                  "$ref": "#/components/schemas/id_number"
  "/api/v1/users/{id}/notifications":
    get:
      summary: return notifications
      tags:
      - Notifications
      operationId: fetchUserNotifications
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: integer
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                allOf:
                - "$ref": "#/components/schemas/paginated_result"
                - type: object
                  properties:
                    results:
                      type: array
                      items:
                        "$ref": "#/components/schemas/notification"
                  required:
                  - results
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
  "/api/v1/notifications/{id}/close":
    patch:
      summary: close notify
      tags:
      - Notifications
      operationId: closeNotification
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              examples:
                example_1:
                  value:
                    message: Notify closed
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
  "/api/v1/sessions":
    post:
      summary: Creates a session
      tags:
      - Sessions
      operationId: openSession
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/access_token"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  "$ref": "#/components/schemas/signin_request_data_user"
              required:
              - user
  "/api/v1/sessions/refresh":
    post:
      summary: Refresh session
      tags:
      - Sessions
      operationId: refreshSession
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/access_token"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
              required:
              - token
  "/api/v1/sessions/logout":
    delete:
      summary: Delete session
      tags:
      - Sessions
      operationId: closeSession
      responses:
        '204':
          description: No content
        '400':
          description: Bad request
  "/api/v1/users":
    post:
      summary: Creates a user
      tags:
      - Users
      operationId: createUser
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              examples:
                example_1:
                  value:
                    message: You're registered successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  "$ref": "#/components/schemas/signup_request_data_user"
    get:
      summary: Return users list
      tags:
      - Users
      operationId: fetchUsers
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/users_array"
  "/api/v1/users/resend_confirmation":
    post:
      summary: Resend confirmation mail
      tags:
      - Users
      operationId: resendConfirmMail
      parameters: []
      responses:
        '201':
          description: Created
          content:
            application/json:
              examples:
                example_1:
                  value:
                    message: Confirmation mail sended again!
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
              required:
              - email
  "/api/v1/users/{id}":
    get:
      summary: Return user
      tags:
      - Users
      operationId: fetchUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/user"
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
    patch:
      summary: Update user
      tags:
      - Users
      operationId: updateUser
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/me"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                profile:
                  "$ref": "#/components/schemas/profile_data_user"
  "/api/v1/users/{id}/confirm_account":
    get:
      summary: Confirm account
      tags:
      - Users
      operationId: confirmAccount
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              examples:
                example_1:
                  value:
                    message: Welcome to the Sample App! Your email has been confirmed
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
  "/api/v1/users/me":
    get:
      summary: Return current user
      tags:
      - Users
      operationId: fetchCurrentUser
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/me"
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/error"
  "/api/v1/users/{id}/load_avatar":
    patch:
      summary: Load user avatar
      tags:
      - Users
      operationId: loadAvatar
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              schema:
                type: object
                "$ref": "#/components/schemas/me"
      requestBody:
        content:
          multipart/form-data:
            schema:
              "$ref": "#/components/schemas/avatar_file"
              encoding:
                avatar:
                  contentType:
                  - image/png
                  - image/jpeg
  "/api/v1/users/{id}/block":
    patch:
      summary: Added user to BL
      tags:
      - Users
      operationId: addUserToBlackList
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              examples:
                example_1:
                  value:
                    message: User added to black list
  "/api/v1/users/{id}/unblock":
    patch:
      summary: Remove user from BL
      tags:
      - Users
      operationId: removeUserFromBlackList
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Found
          content:
            application/json:
              examples:
                example_1:
                  value:
                    message: User removed from black list
servers:
- url: http://{defaultHost}
  variables:
    defaultHost:
      default: localhost:3000
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    id_number:
      type: integer
    gender_type:
      type: string
      enum:
      - male
      - female
    notification_type:
      type: string
      enum:
      - system
      - initiate
      - confirm
      - visited
      - mutuality
    jwt_payload:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/id_number"
        email:
          type: string
          format: email
        admin:
          type: boolean
        salt:
          type: string
        expires_in:
          type: string
          format: date-time
      required:
      - id
      - email
      - admin
      - salt
      - expires_in
    signin_request_data_user:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required:
      - email
      - password
    signup_request_data_user:
      allOf:
      - "$ref": "#/components/schemas/signin_request_data_user"
      - type: object
        properties:
          password_confirmation:
            type: string
            format: password
          first_name:
            type: string
        required:
        - password_confirmation
        - first_name
    profile_data_user:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        age:
          type: integer
        gender:
          "$ref": "#/components/schemas/gender_type"
      required:
      - first_name
    avatar_file:
      type: object
      properties:
        avatar:
          type: file
    base_user:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/id_number"
        first_name:
          type: string
        last_name:
          type: string
        age:
          type: integer
        gender:
          "$ref": "#/components/schemas/gender_type"
        avatar:
          type: string
        city:
          type: string
      required:
      - id
      - created_at
      - updated_at
      - first_name
    user:
      allOf:
      - "$ref": "#/components/schemas/base_user"
      - type: object
        properties:
          initiated_me:
            type: boolean
          initiated_him:
            type: boolean
          blocked_me:
            type: boolean
          blocked_him:
            type: boolean
        required:
        - initiated_me
        - initiated_him
        - blocked_me
        - blocked_him
    me:
      allOf:
      - "$ref": "#/components/schemas/base_user"
      - type: object
        properties:
          email:
            type: string
            format: email
        required:
        - email
    invalid_user:
      type: object
      properties:
        email:
          type: array
          items:
            type: string
        password:
          type: array
          items:
            type: string
    access_token:
      type: object
      properties:
        user_id:
          "$ref": "#/components/schemas/id_number"
        token:
          type: string
        expires_in:
          type: string
          format: date-time
        refresh:
          type: string
      required:
      - user_id
      - token
      - expires_in
      - refresh
    dialog:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/id_number"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        users:
          "$ref": "#/components/schemas/users_array"
        last_message:
          "$ref": "#/components/schemas/message"
      required:
      - id
      - users
      - id
      - created_at
      - updated_at
    message:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/id_number"
        dialog_id:
          "$ref": "#/components/schemas/id_number"
        user_id:
          "$ref": "#/components/schemas/id_number"
        description:
          type: string
        read:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
      - id
      - dialog_id
      - user_id
      - description
      - read
      - created_at
      - updated_at
    notification:
      type: object
      properties:
        id:
          "$ref": "#/components/schemas/id_number"
        user_id:
          "$ref": "#/components/schemas/id_number"
        content:
          type: object
          properties:
            user_ids:
              type: array
              items:
                "$ref": "#/components/schemas/id_number"
            images:
              type: array
              items:
                type: string
            text_notification:
              type: string
        used:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        notification_type:
          "$ref": "#/components/schemas/notification_type"
      required:
      - id
      - user_id
      - notification_type
      - used
      - created_at
      - updated_at
    error:
      type: object
      properties:
        errors:
          type: object
          properties:
            detail:
              type: array
              items:
                type: string
          additionalProperties:
            type: array
            items:
              type: string
    users_array:
      type: array
      items:
        "$ref": "#/components/schemas/user"
    paginated_result:
      type: object
      properties:
        has_next:
          type: boolean
        has_prev:
          type: boolean
        total_count:
          type: integer
        current_page:
          type: integer
        total_pages:
          type: integer
        limit_value:
          type: integer
        results:
          type: array
          items: {}
      required:
      - has_next
      - has_prev
      - total_count
      - current_page
      - total_pages
      - limit_value
      - results
security:
- bearerAuth: []
